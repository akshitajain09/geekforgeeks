Given a string S. In one operation, you can remove the substring "pr" from the string S and get amount X or you can remove the substring "rp" and get the amount Y. 
Find the maximum amount you can get if you perform zero or more such operations optimally. 

Note : 

Substring of a string S is defined as a continuous sequence of characters in S.
After removing pr or rp, the order of remaining letters should remain the same.

Example 1:

Input:
X = 5, Y = 4
S = "abppprrr"
Output: 15
Explanation: 
Here, S = "abppprrr" 
X= 5, Y=4.
Remove "pr", new string S = "abpprr".
Remove "pr", new string S = "abpr".
Remove "pr", new string S = "ab".
In total, we removed "pr" 3 times, 
so total score is 3*X + 0*Y = 3*5 =15.
 

 

Example 2:

Input:
X = 7, Y = 7
S = "prpptppr"
Output: 14
Explanation: 
Here, S = "prpptppr" 
X= 7, Y=7.
As both have the same amount we can first 
remove either pr or rp. Here we start with pr
Remove "pr", new string S = "pptppr".
Remove "pr", new string S = "pptp".
In total, we removed "pr" 2 times, 
so total score is 2*X + 0*Y = 2*7 =14.

Your Task: 
You don't need to read input or print anything. Your task is to complete the function solve() which takes the X ,Y and string S as input parameters and returns the maximum amount you can get after performing the above operations.


Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(|S|)


Constraints:
1 ≤ |S| ≤ 105
1 ≤ X,Y ≤ 105
S contains lowercase English letters only.


SOLUTION C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
class Solution{   
public:
   
      //code here
       pair<string,long long> checkpr(string &s, int x){
        string temp;
        long long ans = 0;
        for(auto it: s){
            if(temp.size() && (temp.back() == 'p' && it == 'r'))temp.pop_back(),ans+=x;
            else temp+=it;
        }
        return {temp,ans};
    }
    pair<string,long long> checkrp(string &s, int y){
        string temp;
        long long ans = 0;
        for(auto it: s){
            if(temp.size() && (temp.back() == 'r' && it == 'p'))temp.pop_back(),ans+=y;
            else temp+=it;
        }
        return {temp,ans};
    }
    long long solve(int X,int Y,string S){
        pair<string,long long>temp1 = checkpr(S,X);
        pair<string,long long>temp2 = checkrp(temp1.first,Y);
        
        pair<string,long long>temp3 = checkrp(S,Y);
        pair<string,long long>temp4 = checkpr(temp3.first,X);
        
        return max(temp1.second+temp2.second,temp3.second+temp4.second);
    }
};

//{ Driver Code Starts.
signed main()
{
  int t;
  cin>>t;
  while(t--)
  {
      int X,Y;
      cin>>X>>Y;
      string S;
      cin>>S;
      Solution obj;
      long long answer=obj.solve(X,Y,S);
      cout<<answer<<endl;
  }
}
// } Driver Code Ends
